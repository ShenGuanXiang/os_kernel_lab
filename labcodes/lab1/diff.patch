diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/boot/bootasm.S ./boot/bootasm.S
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/boot/bootasm.S	2021-03-18 17:08:00.000000000 +0800
+++ ./boot/bootasm.S	2022-10-31 20:58:41.181220149 +0800
@@ -5,16 +5,16 @@
 # memory at physical address 0x7c00 and starts executing in real mode
 # with %cs=0 %ip=7c00.
 
-.set PROT_MODE_CSEG,        0x8                     # kernel code segment selector
-.set PROT_MODE_DSEG,        0x10                    # kernel data segment selector
+.set PROT_MODE_CSEG,        0x8                     # kernel code segment selector:index=1;TI=0b0;RPL=0b00 (TI=0代表应该访问全局描述符表（GDT），TI=1代表应该访问局部描述符表（LDT）)
+.set PROT_MODE_DSEG,        0x10                    # kernel data segment selector:index=2;TI=0b0;RPL=0b00
 .set CR0_PE_ON,             0x1                     # protected mode enable flag
 
 # start address should be 0:7c00, in real mode, the beginning address of the running bootloader
 .globl start
 start:
 .code16                                             # Assemble for 16-bit mode
-    cli                                             # Disable interrupts
-    cld                                             # String operations increment
+    cli                                             # Disable interrupts，之前BIOS运行时，可能打开了中断，而后面打开A20 Gate需要给键盘端口发送指令，而且操作系统还未加载，也无法处理中断.（猜测）
+    cld                                             # String operations increment，串处理指令，例如movs,执行后指针寄存器(si, di)自增1
 
     # Set up the important data segment registers (DS, ES, SS).
     xorw %ax, %ax                                   # Segment number zero
@@ -28,9 +28,9 @@
     #  1MB wrap around to zero by default. This code undoes this.
 seta20.1:
     inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
-    testb $0x2, %al
+    testb $0x2, %al                                 # Status Register (0x64端口) 的 bit1 代表 input register (60h/64h) 有数据
     jnz seta20.1
-
+    # 向键盘输入缓冲器(0x64端口)写一个控制命令(0xd1)
     movb $0xd1, %al                                 # 0xd1 -> port 0x64
     outb %al, $0x64                                 # 0xd1 means: write data to 8042's P2 port
 
@@ -38,7 +38,7 @@
     inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
     testb $0x2, %al
     jnz seta20.2
-
+    # 向键盘输入缓冲器(0x60端口)写入0xdf
     movb $0xdf, %al                                 # 0xdf -> port 0x60
     outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
 
@@ -46,14 +46,14 @@
     # and segment translation that makes virtual addresses
     # identical to physical addresses, so that the
     # effective memory map does not change during the switch.
-    lgdt gdtdesc
-    movl %cr0, %eax
+    lgdt gdtdesc                                    # 加载全局描述符表放入GDTR寄存器
+    movl %cr0, %eax                                 # cr0寄存器0位是保护允许位PE(Protedted Enable)，用于启动保护模式，如果PE位置1，则保护模式启动，如果PE=0，则在实模式下运行。
     orl $CR0_PE_ON, %eax
     movl %eax, %cr0
 
     # Jump to next instruction, but in 32-bit code segment.
     # Switches processor into 32-bit mode.
-    ljmp $PROT_MODE_CSEG, $protcseg
+    ljmp $PROT_MODE_CSEG, $protcseg                 # 第一个参数是段，第二个参数是偏移量
 
 .code32                                             # Assemble for 32-bit mode
 protcseg:
@@ -75,12 +75,12 @@
     jmp spin
 
 # Bootstrap GDT
-.p2align 2                                          # force 4 byte alignment
-gdt:
+.p2align 2                                          # force 4 byte alignment， 将位置计数器移动到4字节的倍数，如果已经是4字节的倍数则不会发生变化。
+gdt:                                                # 关于SEG_ASM（段描述符）的定义在ASM.h中，以type，base，lim为参数定义一个段描述符
     SEG_NULLASM                                     # null seg
-    SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)           # code seg for bootloader and kernel
-    SEG_ASM(STA_W, 0x0, 0xffffffff)                 # data seg for bootloader and kernel
-
+    SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)           # code seg for bootloader and kernel，可读可执行
+    SEG_ASM(STA_W, 0x0, 0xffffffff)                 # data seg for bootloader and kernel，可写但不可执行
+# GDTR长48位，其中高32位为基地址，低16位为段界限
 gdtdesc:
-    .word 0x17                                      # sizeof(gdt) - 1
-    .long gdt                                       # address gdt
+    .word 0x17                                      # sizeof(gdt) - 1，为什么是sizeof(gdt) - 1而不是sizeof(gdt)我也不是特别清楚，据说是规定
+    .long gdt                                       # address gdt，.long后面的参数为gdt运行时生成的值，即gdt表的地址
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/boot/bootmain.c ./boot/bootmain.c
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/boot/bootmain.c	2021-03-18 17:08:00.000000000 +0800
+++ ./boot/bootmain.c	2022-10-31 21:01:11.940783868 +0800
@@ -40,18 +40,18 @@
         /* do nothing */;
 }
 
-/* readsect - read a single sector at @secno into @dst */
+/* readsect - read a single sector at @secno into @dst，bootloader的访问硬盘都是LBA模式的PIO（Program IO）方式，即所有的IO操作是通过CPU访问硬盘的IO地址寄存器完成。 */
 static void
 readsect(void *dst, uint32_t secno) {
     // wait for disk to be ready
     waitdisk();
-
-    outb(0x1F2, 1);                         // count = 1
-    outb(0x1F3, secno & 0xFF);
-    outb(0x1F4, (secno >> 8) & 0xFF);
-    outb(0x1F5, (secno >> 16) & 0xFF);
-    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
-    outb(0x1F7, 0x20);                      // cmd 0x20 - read sectors
+    // 发出读取扇区的命令
+    outb(0x1F2, 1);                            // count = 1，读一个扇区
+    outb(0x1F3, secno & 0xFF);                 // LBA参数的0-7位
+    outb(0x1F4, (secno >> 8) & 0xFF);          // LBA参数的8-15位
+    outb(0x1F5, (secno >> 16) & 0xFF);         // LBA参数的16-23位
+    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0); // 第0~3位是LBA模式的24-27位;第4位为0，代表主盘;第6位：为1=LBA模式(0 = CHS模式);第7位和第5位必须为1
+    outb(0x1F7, 0x20);                         // cmd 0x20 - read sectors
 
     // wait for disk to be ready
     waitdisk();
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/diff.patch ./diff.patch
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/diff.patch	1970-01-01 08:00:00.000000000 +0800
+++ ./diff.patch	2022-10-31 21:40:37.612801997 +0800
@@ -0,0 +1,113 @@
+diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/boot/bootasm.S ./boot/bootasm.S
+--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/boot/bootasm.S	2021-03-18 17:08:00.000000000 +0800
++++ ./boot/bootasm.S	2022-10-31 20:58:41.181220149 +0800
+@@ -5,16 +5,16 @@
+ # memory at physical address 0x7c00 and starts executing in real mode
+ # with %cs=0 %ip=7c00.
+ 
+-.set PROT_MODE_CSEG,        0x8                     # kernel code segment selector
+-.set PROT_MODE_DSEG,        0x10                    # kernel data segment selector
++.set PROT_MODE_CSEG,        0x8                     # kernel code segment selector:index=1;TI=0b0;RPL=0b00 (TI=0代表应该访问全局描述符表（GDT），TI=1代表应该访问局部描述符表（LDT）)
++.set PROT_MODE_DSEG,        0x10                    # kernel data segment selector:index=2;TI=0b0;RPL=0b00
+ .set CR0_PE_ON,             0x1                     # protected mode enable flag
+ 
+ # start address should be 0:7c00, in real mode, the beginning address of the running bootloader
+ .globl start
+ start:
+ .code16                                             # Assemble for 16-bit mode
+-    cli                                             # Disable interrupts
+-    cld                                             # String operations increment
++    cli                                             # Disable interrupts，之前BIOS运行时，可能打开了中断，而后面打开A20 Gate需要给键盘端口发送指令，而且操作系统还未加载，也无法处理中断.（猜测）
++    cld                                             # String operations increment，串处理指令，例如movs,执行后指针寄存器(si, di)自增1
+ 
+     # Set up the important data segment registers (DS, ES, SS).
+     xorw %ax, %ax                                   # Segment number zero
+@@ -28,9 +28,9 @@
+     #  1MB wrap around to zero by default. This code undoes this.
+ seta20.1:
+     inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+-    testb $0x2, %al
++    testb $0x2, %al                                 # Status Register (0x64端口) 的 bit1 代表 input register (60h/64h) 有数据
+     jnz seta20.1
+-
++    # 向键盘输入缓冲器(0x64端口)写一个控制命令(0xd1)
+     movb $0xd1, %al                                 # 0xd1 -> port 0x64
+     outb %al, $0x64                                 # 0xd1 means: write data to 8042's P2 port
+ 
+@@ -38,7 +38,7 @@
+     inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+     testb $0x2, %al
+     jnz seta20.2
+-
++    # 向键盘输入缓冲器(0x60端口)写入0xdf
+     movb $0xdf, %al                                 # 0xdf -> port 0x60
+     outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
+ 
+@@ -46,14 +46,14 @@
+     # and segment translation that makes virtual addresses
+     # identical to physical addresses, so that the
+     # effective memory map does not change during the switch.
+-    lgdt gdtdesc
+-    movl %cr0, %eax
++    lgdt gdtdesc                                    # 加载全局描述符表放入GDTR寄存器
++    movl %cr0, %eax                                 # cr0寄存器0位是保护允许位PE(Protedted Enable)，用于启动保护模式，如果PE位置1，则保护模式启动，如果PE=0，则在实模式下运行。
+     orl $CR0_PE_ON, %eax
+     movl %eax, %cr0
+ 
+     # Jump to next instruction, but in 32-bit code segment.
+     # Switches processor into 32-bit mode.
+-    ljmp $PROT_MODE_CSEG, $protcseg
++    ljmp $PROT_MODE_CSEG, $protcseg                 # 第一个参数是段，第二个参数是偏移量
+ 
+ .code32                                             # Assemble for 32-bit mode
+ protcseg:
+@@ -75,12 +75,12 @@
+     jmp spin
+ 
+ # Bootstrap GDT
+-.p2align 2                                          # force 4 byte alignment
+-gdt:
++.p2align 2                                          # force 4 byte alignment， 将位置计数器移动到4字节的倍数，如果已经是4字节的倍数则不会发生变化。
++gdt:                                                # 关于SEG_ASM（段描述符）的定义在ASM.h中，以type，base，lim为参数定义一个段描述符
+     SEG_NULLASM                                     # null seg
+-    SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)           # code seg for bootloader and kernel
+-    SEG_ASM(STA_W, 0x0, 0xffffffff)                 # data seg for bootloader and kernel
+-
++    SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)           # code seg for bootloader and kernel，可读可执行
++    SEG_ASM(STA_W, 0x0, 0xffffffff)                 # data seg for bootloader and kernel，可写但不可执行
++# GDTR长48位，其中高32位为基地址，低16位为段界限
+ gdtdesc:
+-    .word 0x17                                      # sizeof(gdt) - 1
+-    .long gdt                                       # address gdt
++    .word 0x17                                      # sizeof(gdt) - 1，为什么是sizeof(gdt) - 1而不是sizeof(gdt)我也不是特别清楚，据说是规定
++    .long gdt                                       # address gdt，.long后面的参数为gdt运行时生成的值，即gdt表的地址
+diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/boot/bootmain.c ./boot/bootmain.c
+--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/boot/bootmain.c	2021-03-18 17:08:00.000000000 +0800
++++ ./boot/bootmain.c	2022-10-31 21:01:11.940783868 +0800
+@@ -40,18 +40,18 @@
+         /* do nothing */;
+ }
+ 
+-/* readsect - read a single sector at @secno into @dst */
++/* readsect - read a single sector at @secno into @dst，bootloader的访问硬盘都是LBA模式的PIO（Program IO）方式，即所有的IO操作是通过CPU访问硬盘的IO地址寄存器完成。 */
+ static void
+ readsect(void *dst, uint32_t secno) {
+     // wait for disk to be ready
+     waitdisk();
+-
+-    outb(0x1F2, 1);                         // count = 1
+-    outb(0x1F3, secno & 0xFF);
+-    outb(0x1F4, (secno >> 8) & 0xFF);
+-    outb(0x1F5, (secno >> 16) & 0xFF);
+-    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
+-    outb(0x1F7, 0x20);                      // cmd 0x20 - read sectors
++    // 发出读取扇区的命令
++    outb(0x1F2, 1);                            // count = 1，读一个扇区
++    outb(0x1F3, secno & 0xFF);                 // LBA参数的0-7位
++    outb(0x1F4, (secno >> 8) & 0xFF);          // LBA参数的8-15位
++    outb(0x1F5, (secno >> 16) & 0xFF);         // LBA参数的16-23位
++    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0); // 第0~3位是LBA模式的24-27位;第4位为0，代表主盘;第6位：为1=LBA模式(0 = CHS模式);第7位和第5位必须为1
++    outb(0x1F7, 0x20);                         // cmd 0x20 - read sectors
+ 
+     // wait for disk to be ready
+     waitdisk();
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/debug/kdebug.c ./kern/debug/kdebug.c
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/debug/kdebug.c	2021-03-18 17:08:00.000000000 +0800
+++ ./kern/debug/kdebug.c	2022-10-09 20:38:48.491542727 +0800
@@ -247,6 +247,8 @@
     }
 }
 
+// read_eip必须定义为常规函数而不是inline函数，因为这样的话在调用read_eip时会把当前指令的下一条指令的地址（也就是eip寄存器的值）压栈，
+// 那么在进入read_eip函数内部后便可以从栈中获取到调用前eip寄存器的值。
 static __noinline uint32_t
 read_eip(void) {
     uint32_t eip;
@@ -295,12 +297,20 @@
       * (2) call read_eip() to get the value of eip. the type is (uint32_t);
       * (3) from 0 .. STACKFRAME_DEPTH
       *    (3.1) printf value of ebp, eip
-      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (uint32_t)ebp +2 [0..4]
+      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (uint32_t*)ebp +2 [0..4]
       *    (3.3) cprintf("\n");
       *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
       *    (3.5) popup a calling stackframe
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+     uint32_t ebp = read_ebp(), eip = read_eip();//对应(1)、(2)
+     int i;
+     for (i = 0; i < STACKFRAME_DEPTH && ebp; i++)
+     {
+        cprintf("ebp:0x%08x eip:0x%08x args:0x%08x 0x%08x 0x%08x 0x%08x\n", ebp, eip, ((uint32_t*)ebp + 2)[0], ((uint32_t*)ebp + 2)[1], ((uint32_t*)ebp + 2)[2], ((uint32_t*)ebp + 2)[3]); //对应(3.1)、(3.2)、(3.3)
+        print_debuginfo(eip - 1); //对应(3.4)，由于变量eip存放的是下一条指令的地址，因此将变量eip的值减去1，得到的指令地址就属于当前指令的范围了。由于只要输入的地址属于当前指令的起始和结束位置之间，print_debuginfo都能搜索到当前指令，因此这里减去1即可。
+        eip = *(uint32_t*)(ebp + 4), ebp = *(uint32_t*)ebp; //对应(3.5)，这里默认ss基址为0
+     }
 }
 
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/driver/clock.c ./kern/driver/clock.c
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/driver/clock.c	2021-03-18 17:08:00.000000000 +0800
+++ ./kern/driver/clock.c	2022-10-14 12:54:14.393973975 +0800
@@ -33,6 +33,7 @@
 clock_init(void) {
     // set 8253 timer-chip
     outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
+    // 设置时钟每秒中断100次
     outb(IO_TIMER1, TIMER_DIV(100) % 256);
     outb(IO_TIMER1, TIMER_DIV(100) / 256);
 
@@ -40,6 +41,6 @@
     ticks = 0;
 
     cprintf("++ setup timer interrupts\n");
-    pic_enable(IRQ_TIMER);
+    pic_enable(IRQ_TIMER); // 通过中断控制器使能时钟中断
 }
 
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/driver/console.c ./kern/driver/console.c
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/driver/console.c	2021-03-18 17:08:00.000000000 +0800
+++ ./kern/driver/console.c	2022-10-14 12:39:16.280505246 +0800
@@ -106,7 +106,7 @@
 
     // No modem controls
     outb(COM1 + COM_MCR, 0);
-    // Enable rcv interrupts
+    // Enable rcv interrupts，使能串口1接收字符后产生中断
     outb(COM1 + COM_IER, COM_IER_RDI);
 
     // Clear any preexisting overrun indications and interrupts
@@ -116,7 +116,7 @@
     (void) inb(COM1+COM_RX);
 
     if (serial_exists) {
-        pic_enable(IRQ_COM1);
+        pic_enable(IRQ_COM1); // 通过中断控制器使能串口1中断
     }
 }
 
@@ -417,7 +417,7 @@
 kbd_init(void) {
     // drain the kbd buffer
     kbd_intr();
-    pic_enable(IRQ_KBD);
+    pic_enable(IRQ_KBD); // 通过中断控制器使能键盘输入中断
 }
 
 /* cons_init - initializes the console devices */
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/init/init.c ./kern/init/init.c
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/init/init.c	2021-03-18 17:08:00.000000000 +0800
+++ ./kern/init/init.c	2022-10-17 22:27:22.597884940 +0800
@@ -37,7 +37,7 @@
 
     //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
     // user/kernel mode switch test
-    //lab1_switch_test();
+    lab1_switch_test();
 
     /* do nothing */
     while (1);
@@ -84,11 +84,24 @@
 static void
 lab1_switch_to_user(void) {
     //LAB1 CHALLENGE 1 : TODO
+    asm volatile (
+        "sub $0x8, %%esp \n"
+        "int %0 \n"                 // int 指令将 eflag、cs、eip 压栈
+        "movl %%ebp, %%esp"
+        :
+        : "i"(T_SWITCH_TOU)
+    );
 }
 
 static void
 lab1_switch_to_kernel(void) {
     //LAB1 CHALLENGE 1 :  TODO
+    asm volatile (
+        "int %0 \n"
+        "movl %%ebp, %%esp \n"
+        :
+        : "i"(T_SWITCH_TOK)
+    );
 }
 
 static void
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/trap/trap.c ./kern/trap/trap.c
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/trap/trap.c	2021-03-18 17:08:00.000000000 +0800
+++ ./kern/trap/trap.c	2022-10-17 19:34:36.208702719 +0800
@@ -46,6 +46,18 @@
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
+    // (1)
+    extern uintptr_t __vectors[];
+    // (2)
+    int i;
+    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
+        SETGATE(idt[i], 0, KERNEL_CS, __vectors[i], DPL_KERNEL); // trapno = i, gd_type = Interrupt-gate descriptor, DPL = 0
+    }
+	// 系统调用中断
+    SETGATE(idt[T_SYSCALL], 1, KERNEL_CS, __vectors[T_SYSCALL], DPL_USER); // trapno = T_SYSCALL = 0x80，gd_type = Trap-gate descriptor，DPL = 3
+    SETGATE(idt[T_SWITCH_TOK], 1, KERNEL_CS, __vectors[T_SWITCH_TOK], DPL_USER);
+	// (3)
+    lidt(&idt_pd);
 }
 
 static const char *
@@ -144,9 +156,13 @@
         /* LAB1 YOUR CODE : STEP 3 */
         /* handle the timer interrupt */
         /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
-         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (2) Every TICK_NUM cycle, you can print some info using a function, such as print_ticks().
          * (3) Too Simple? Yes, I think so!
          */
+        ticks ++; // (1)
+        if (ticks % TICK_NUM == 0) {
+            print_ticks(); // (2)
+        }
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
@@ -155,11 +171,44 @@
     case IRQ_OFFSET + IRQ_KBD:
         c = cons_getc();
         cprintf("kbd [%03d] %c\n", c, c);
+        if(c == '0' && (tf->tf_cs & 3) != 0)
+        {
+                cprintf("Input 0......switch to kernel\n");
+                tf->tf_cs = KERNEL_CS;
+                tf->tf_ds = tf->tf_es = KERNEL_DS;
+                tf->tf_eflags &= ~FL_IOPL_MASK;
+        }
+        else if (c == '3' && (tf->tf_cs & 3) != 3)
+        {
+                cprintf("Input 3......switch to user\n");
+                tf->tf_cs = USER_CS;
+                tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+                tf->tf_eflags |= FL_IOPL_MASK;
+        }
         break;
     //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
-    case T_SWITCH_TOU:
-    case T_SWITCH_TOK:
-        panic("T_SWITCH_** ??\n");
+ 	case T_SWITCH_TOU:
+        if(tf->tf_cs != USER_CS)	//检查是不是用户态，不是就操作
+        {
+                cprintf("Switch to user\n");
+                // 设置用户态对应的cs,ds,es,ss四个寄存器
+            	tf->tf_cs = USER_CS;
+                tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+                // 降低IO权限，使用户态可以使用IO
+                tf->tf_eflags |= FL_IOPL_MASK;
+        }
+        break;
+
+	case T_SWITCH_TOK:
+        if(tf->tf_cs != KERNEL_CS)	//检查是不是内核态，不是就操作
+        {          
+                cprintf("Switch to kernel\n");
+            	// 设置内核态对应的cs,ds,es三个寄存器
+                tf->tf_cs = KERNEL_CS;
+                tf->tf_ds = tf->tf_es = KERNEL_DS;
+				// 用户态不再能使用I/O
+                tf->tf_eflags &= ~FL_IOPL_MASK;
+        }
         break;
     case IRQ_OFFSET + IRQ_IDE1:
     case IRQ_OFFSET + IRQ_IDE2:
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/trap/trapentry.S ./kern/trap/trapentry.S
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/kern/trap/trapentry.S	2021-03-18 17:08:00.000000000 +0800
+++ ./kern/trap/trapentry.S	2022-10-18 00:01:25.443534164 +0800
@@ -10,7 +10,7 @@
     pushl %es
     pushl %fs
     pushl %gs
-    pushal
+    pushal                # Push EAX, ECX, EDX, EBX, original ESP, EBP, ESI, and EDI.
 
     # load GD_KDATA into %ds and %es to set up data segments for kernel
     movl $GD_KDATA, %eax
@@ -40,5 +40,5 @@
 
     # get rid of the trap number and error code
     addl $0x8, %esp
-    iret
+    iret                 # 恢复 cs、eflag以及 eip
 
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/libs/elf.h ./libs/elf.h
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/libs/elf.h	2021-03-18 17:08:00.000000000 +0800
+++ ./libs/elf.h	2022-10-09 14:39:43.699596059 +0800
@@ -5,33 +5,33 @@
 
 #define ELF_MAGIC    0x464C457FU            // "\x7FELF" in little endian
 
-/* file header */
+/* file header，ELF的文件头包含整个执行文件的控制结构 */
 struct elfhdr {
     uint32_t e_magic;     // must equal ELF_MAGIC
     uint8_t e_elf[12];
     uint16_t e_type;      // 1=relocatable, 2=executable, 3=shared object, 4=core image
     uint16_t e_machine;   // 3=x86, 4=68K, etc.
     uint32_t e_version;   // file version, always 1
-    uint32_t e_entry;     // entry point if executable
-    uint32_t e_phoff;     // file position of program header or 0
+    uint32_t e_entry;     // entry point if executable，程序入口的虚拟地址
+    uint32_t e_phoff;     // file position of program header or 0，program header 表的位置偏移
     uint32_t e_shoff;     // file position of section header or 0
     uint32_t e_flags;     // architecture-specific flags, usually 0
     uint16_t e_ehsize;    // size of this elf header
     uint16_t e_phentsize; // size of an entry in program header
-    uint16_t e_phnum;     // number of entries in program header or 0
+    uint16_t e_phnum;     // number of entries in program header or 0，program header表中的入口数目
     uint16_t e_shentsize; // size of an entry in section header
     uint16_t e_shnum;     // number of entries in section header or 0
     uint16_t e_shstrndx;  // section number that contains section name strings
 };
 
-/* program section header */
+/* program section header，program header描述与程序执行直接相关的目标文件结构信息，用来在文件中定位各个段的映像，同时包含其他一些用来为程序创建进程映像所必需的信息。*/
 struct proghdr {
-    uint32_t p_type;   // loadable code or data, dynamic linking info,etc.
-    uint32_t p_offset; // file offset of segment
-    uint32_t p_va;     // virtual address to map segment
+    uint32_t p_type;   // loadable code or data, dynamic linking info,etc.段类型
+    uint32_t p_offset; // file offset of segment 段相对文件头的偏移值
+    uint32_t p_va;     // virtual address to map segment 段的第一个字节将被放到内存中的虚拟地址
     uint32_t p_pa;     // physical address, not used
     uint32_t p_filesz; // size of segment in file
-    uint32_t p_memsz;  // size of segment in memory (bigger if contains bss）
+    uint32_t p_memsz;  // size of segment in memory (bigger if contains bss）段在内存映像中占用的字节数
     uint32_t p_flags;  // read/write/execute bits
     uint32_t p_align;  // required alignment, invariably hardware page size
 };
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/libs/x86.h ./libs/x86.h
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/libs/x86.h	2021-03-18 17:08:00.000000000 +0800
+++ ./libs/x86.h	2022-10-09 17:53:57.595417347 +0800
@@ -45,11 +45,13 @@
 static inline void
 insl(uint32_t port, void *addr, int cnt) {
     asm volatile (
-            "cld;"
-            "repne; insl;"
-            : "=D" (addr), "=c" (cnt)
-            : "d" (port), "0" (addr), "1" (cnt)
-            : "memory", "cc");
+            "cld;"                                  // cld指每次串操作，自动增加指针寄存器(di,si)寄存器值
+            "repne; insl;"                          // repne是重复执行接下来的insl指令，重复次数由ecx寄存器决定。insl就是从指定端口读取4字节长度的串操作。
+            : "=D" (addr), "=c" (cnt)               // 输出寄存器是di(输出给addr变量), ecx(输出给cnt变量)
+            : "d" (port), "0" (addr), "1" (cnt)     // 输入寄存器是edx(初始值由port变量提供)， di（初始值由addr变量提供)， ecx(初始值由cnt变量提供)
+            : "memory", "cc");                      // When you do the clobber list, you specify the registers as above with the %. 
+                                                    // If you write to a variable, you must include "memory" as one of The Clobbered. This is in case you wrote to a variable that GCC thought it had in a register. This is the same as clobbering all registers. 
+                                                    // While I've never run into a problem with it, you might also want to add "cc" as a clobber if you change the condition codes (the bits in the flags register the jnz, je, etc. operators look at.)
 }
 
 static inline void
@@ -62,6 +64,7 @@
     asm volatile ("outw %0, %1" :: "a" (data), "d" (port));
 }
 
+// read_ebp必须定义为inline函数，否则获取的是执行read_ebp函数时的ebp寄存器的值
 static inline uint32_t
 read_ebp(void) {
     uint32_t ebp;
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/Makefile ./Makefile
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ ./Makefile	2022-10-31 20:51:58.435590407 +0800
@@ -0,0 +1,269 @@
+PROJ	:= challenge
+EMPTY	:=
+SPACE	:= $(EMPTY) $(EMPTY)
+SLASH	:= /
+
+V       := @
+#need llvm/clang-3.5+
+#USELLVM := 1
+# try to infer the correct GCCPREFX
+ifndef GCCPREFIX
+GCCPREFIX := $(shell if i386-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \
+	then echo 'i386-elf-'; \
+	elif objdump -i 2>&1 | grep 'elf32-i386' >/dev/null 2>&1; \
+	then echo ''; \
+	else echo "***" 1>&2; \
+	echo "*** Error: Couldn't find an i386-elf version of GCC/binutils." 1>&2; \
+	echo "*** Is the directory with i386-elf-gcc in your PATH?" 1>&2; \
+	echo "*** If your i386-elf toolchain is installed with a command" 1>&2; \
+	echo "*** prefix other than 'i386-elf-', set your GCCPREFIX" 1>&2; \
+	echo "*** environment variable to that prefix and run 'make' again." 1>&2; \
+	echo "*** To turn off this error, run 'gmake GCCPREFIX= ...'." 1>&2; \
+	echo "***" 1>&2; exit 1; fi)
+endif
+
+# try to infer the correct QEMU
+ifndef QEMU
+QEMU := $(shell if which qemu-system-i386 > /dev/null; \
+	then echo 'qemu-system-i386'; exit; \
+	elif which i386-elf-qemu > /dev/null; \
+	then echo 'i386-elf-qemu'; exit; \
+	elif which qemu > /dev/null; \
+	then echo 'qemu'; exit; \
+	else \
+	echo "***" 1>&2; \
+	echo "*** Error: Couldn't find a working QEMU executable." 1>&2; \
+	echo "*** Is the directory containing the qemu binary in your PATH" 1>&2; \
+	echo "***" 1>&2; exit 1; fi)
+endif
+
+# eliminate default suffix rules
+.SUFFIXES: .c .S .h
+
+# delete target files if there is an error (or make is interrupted)
+.DELETE_ON_ERROR:
+
+# define compiler and flags
+ifndef  USELLVM
+HOSTCC		:= gcc
+HOSTCFLAGS	:= -g -Wall -O2
+CC		:= $(GCCPREFIX)gcc
+CFLAGS	:= -march=i686 -fno-builtin -fno-PIC -Wall -ggdb -m32 -gstabs -nostdinc $(DEFS)
+CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+else
+HOSTCC		:= clang
+HOSTCFLAGS	:= -g -Wall -O2
+CC		:= clang
+CFLAGS	:= -march=i686 -fno-builtin -fno-PIC -Wall -g -m32 -nostdinc $(DEFS)
+CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+endif
+
+CTYPE	:= c S
+
+LD      := $(GCCPREFIX)ld
+LDFLAGS	:= -m $(shell $(LD) -V | grep elf_i386 2>/dev/null | head -n 1)
+LDFLAGS	+= -nostdlib
+
+OBJCOPY := $(GCCPREFIX)objcopy
+OBJDUMP := $(GCCPREFIX)objdump
+
+COPY	:= cp
+MKDIR   := mkdir -p
+MV		:= mv
+RM		:= rm -f
+AWK		:= awk
+SED		:= sed
+SH		:= sh
+TR		:= tr
+TOUCH	:= touch -c
+
+OBJDIR	:= obj
+BINDIR	:= bin
+
+ALLOBJS	:=
+ALLDEPS	:=
+TARGETS	:=
+
+include tools/function.mk
+
+listf_cc = $(call listf,$(1),$(CTYPE))
+
+# for cc
+add_files_cc = $(call add_files,$(1),$(CC),$(CFLAGS) $(3),$(2),$(4))
+create_target_cc = $(call create_target,$(1),$(2),$(3),$(CC),$(CFLAGS))
+
+# for hostcc
+add_files_host = $(call add_files,$(1),$(HOSTCC),$(HOSTCFLAGS),$(2),$(3))
+create_target_host = $(call create_target,$(1),$(2),$(3),$(HOSTCC),$(HOSTCFLAGS))
+
+cgtype = $(patsubst %.$(2),%.$(3),$(1))
+objfile = $(call toobj,$(1))
+asmfile = $(call cgtype,$(call toobj,$(1)),o,asm)
+outfile = $(call cgtype,$(call toobj,$(1)),o,out)
+symfile = $(call cgtype,$(call toobj,$(1)),o,sym)
+
+# for match pattern
+match = $(shell echo $(2) | $(AWK) '{for(i=1;i<=NF;i++){if(match("$(1)","^"$$(i)"$$")){exit 1;}}}'; echo $$?)
+
+# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
+# include kernel/user
+
+INCLUDE	+= libs/
+
+CFLAGS	+= $(addprefix -I,$(INCLUDE))
+
+LIBDIR	+= libs
+
+$(call add_files_cc,$(call listf_cc,$(LIBDIR)),libs,)
+
+# -------------------------------------------------------------------
+# kernel
+
+KINCLUDE	+= kern/debug/ \
+			   kern/driver/ \
+			   kern/trap/ \
+			   kern/mm/
+
+KSRCDIR		+= kern/init \
+			   kern/libs \
+			   kern/debug \
+			   kern/driver \
+			   kern/trap \
+			   kern/mm
+
+KCFLAGS		+= $(addprefix -I,$(KINCLUDE))
+
+$(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,$(KCFLAGS))
+
+KOBJS	= $(call read_packet,kernel libs)
+
+# create kernel target
+kernel = $(call totarget,kernel)
+
+$(kernel): tools/kernel.ld
+
+$(kernel): $(KOBJS)
+	@echo + ld $@
+	$(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS)
+	@$(OBJDUMP) -S $@ > $(call asmfile,kernel)
+	@$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $(call symfile,kernel)
+
+$(call create_target,kernel)
+
+# -------------------------------------------------------------------
+
+# create bootblock
+bootfiles = $(call listf_cc,boot)
+$(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),$(CFLAGS) -Os -nostdinc))
+
+bootblock = $(call totarget,bootblock)
+
+$(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign)
+	@echo + ld $@
+	$(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ -o $(call toobj,bootblock)
+	@$(OBJDUMP) -S $(call objfile,bootblock) > $(call asmfile,bootblock)
+	@$(OBJCOPY) -S -O binary $(call objfile,bootblock) $(call outfile,bootblock)
+	@$(call totarget,sign) $(call outfile,bootblock) $(bootblock)
+
+$(call create_target,bootblock)
+
+# -------------------------------------------------------------------
+
+# create 'sign' tools
+$(call add_files_host,tools/sign.c,sign,sign)
+$(call create_target_host,sign,sign)
+
+# -------------------------------------------------------------------
+
+# create ucore.img
+UCOREIMG	:= $(call totarget,ucore.img)
+
+$(UCOREIMG): $(kernel) $(bootblock)
+	$(V)dd if=/dev/zero of=$@ count=10000
+	$(V)dd if=$(bootblock) of=$@ conv=notrunc
+	$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc
+
+$(call create_target,ucore.img)
+
+# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
+
+$(call finish_all)
+
+IGNORE_ALLDEPS	= clean \
+				  dist-clean \
+				  grade \
+				  touch \
+				  print-.+ \
+				  handin
+
+ifeq ($(call match,$(MAKECMDGOALS),$(IGNORE_ALLDEPS)),0)
+-include $(ALLDEPS)
+endif
+
+# files for grade script
+
+TARGETS: $(TARGETS)
+
+.DEFAULT_GOAL := TARGETS
+
+.PHONY: qemu qemu-nox debug debug-nox
+qemu-mon: $(UCOREIMG)
+	$(V)$(QEMU)  -no-reboot -monitor stdio -hda $< -serial null
+qemu: $(UCOREIMG)
+	$(V)$(QEMU) -no-reboot -parallel stdio -hda $< -serial null
+log: $(UCOREIMG)
+	$(V)$(QEMU) -no-reboot -d int,cpu_reset  -D q.log -parallel stdio -hda $< -serial null
+qemu-nox: $(UCOREIMG)
+	$(V)$(QEMU)   -no-reboot -serial mon:stdio -hda $< -nographic
+TERMINAL        :=gnome-terminal
+debug: $(UCOREIMG)
+	$(V)$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -parallel stdio -hda $< -serial null &
+	$(V)sleep 2
+	$(V)$(TERMINAL) -e "gdb -q -tui -x tools/gdbinit"
+	
+debug-nox: $(UCOREIMG)
+	$(V)$(QEMU) -S -s -serial mon:stdio -hda $< -nographic &
+	$(V)sleep 2
+	$(V)$(TERMINAL) -e "gdb -q -x tools/gdbinit"
+
+.PHONY: grade touch
+
+GRADE_GDB_IN	:= .gdb.in
+GRADE_QEMU_OUT	:= .qemu.out
+HANDIN			:= proj$(PROJ)-handin.tar.gz
+
+TOUCH_FILES		:= kern/trap/trap.c
+
+MAKEOPTS		:= --quiet --no-print-directory
+
+grade:
+	$(V)$(MAKE) $(MAKEOPTS) clean
+	$(V)$(SH) tools/grade.sh
+
+touch:
+	$(V)$(foreach f,$(TOUCH_FILES),$(TOUCH) $(f))
+
+print-%:
+	@echo $($(shell echo $(patsubst print-%,%,$@) | $(TR) [a-z] [A-Z]))
+
+.PHONY: clean dist-clean handin packall tags
+clean:
+	$(V)$(RM) $(GRADE_GDB_IN) $(GRADE_QEMU_OUT) cscope* tags
+	-$(RM) -r $(OBJDIR) $(BINDIR)
+
+dist-clean: clean
+	-$(RM) $(HANDIN)
+
+handin: packall
+	@echo Please visit http://learn.tsinghua.edu.cn and upload $(HANDIN). Thanks!
+
+packall: clean
+	@$(RM) -f $(HANDIN)
+	@tar -czf $(HANDIN) `find . -type f -o -type d | grep -v '^\.*$$' | grep -vF '$(HANDIN)'`
+
+tags:
+	@echo TAGS ALL
+	$(V)rm -f cscope.files cscope.in.out cscope.out cscope.po.out tags
+	$(V)find . -type f -name "*.[chS]" >cscope.files
+	$(V)cscope -bq 
+	$(V)ctags -L cscope.files
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/tools/gdbinit ./tools/gdbinit
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/tools/gdbinit	2021-03-18 17:08:00.000000000 +0800
+++ ./tools/gdbinit	2022-10-17 20:42:05.742831678 +0800
@@ -1,4 +1,14 @@
+file obj/sign/tools/sign.o
+file obj/bootblock.o
 file bin/kernel
+set architecture i8086
 target remote :1234
-break kern_init
-continue
\ No newline at end of file
+break lab1_switch_to_user
+continue
+# break *0x7c00
+# continue
+x/2i $pc
+set architecture i386
+layout src
+# layout split
+layout regs
\ No newline at end of file
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/tools/sign.c ./tools/sign.c
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/tools/sign.c	2021-03-18 17:08:00.000000000 +0800
+++ ./tools/sign.c	2022-10-14 09:52:13.482061240 +0800
@@ -10,12 +10,12 @@
         fprintf(stderr, "Usage: <input filename> <output filename>\n");
         return -1;
     }
-    if (stat(argv[1], &st) != 0) {
+    if (stat(argv[1], &st) != 0) { // 获取文件信息
         fprintf(stderr, "Error opening file '%s': %s\n", argv[1], strerror(errno));
         return -1;
     }
     printf("'%s' size: %lld bytes\n", argv[1], (long long)st.st_size);
-    if (st.st_size > 510) {
+    if (st.st_size > 510) { // 限制1：输入字节数<=510
         fprintf(stderr, "%lld >> 510!!\n", (long long)st.st_size);
         return -1;
     }
@@ -29,7 +29,7 @@
     }
     fclose(ifp);
     buf[510] = 0x55;
-    buf[511] = 0xAA;
+    buf[511] = 0xAA; // 限制2：最后两个字节为0x55AA
     FILE *ofp = fopen(argv[2], "wb+");
     size = fwrite(buf, 1, 512, ofp);
     if (size != 512) {
diff -r -u -P /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/.vscode/c_cpp_properties.json ./.vscode/c_cpp_properties.json
--- /home/hero945/Coding/os_kernel_lab_original/labcodes/lab1/.vscode/c_cpp_properties.json	1970-01-01 08:00:00.000000000 +0800
+++ ./.vscode/c_cpp_properties.json	2022-10-14 00:21:31.494780448 +0800
@@ -0,0 +1,26 @@
+{
+    "configurations": [
+        {
+            "name": "Linux",
+            "includePath": [
+                "${workspaceFolder}/**",
+                "${workspaceFolder}/boot",
+                "${workspaceFolder}/kern/debug",
+                "${workspaceFolder}/kern/driver",
+                "${workspaceFolder}/kern/init",
+                "${workspaceFolder}/kern/libs",
+                "${workspaceFolder}/kern/mm",
+                "${workspaceFolder}/kern/trap",
+                "${workspaceFolder}/libs",
+                "${default}" 
+            ],
+            "defines": [],
+            "compilerPath": "/usr/bin/gcc",
+            "cStandard": "c89",
+            "cppStandard": "c++11",
+            "intelliSenseMode": "linux-gcc-x64",
+            "configurationProvider": "ms-vscode.cmake-tools"
+        }
+    ],
+    "version": 4
+}
\ No newline at end of file
